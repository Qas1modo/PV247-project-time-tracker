generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int    @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
}

model Activity {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  deleted       Boolean  @default(false)
  name          String   @db.VarChar(255)
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  records       Record[]
}

model Category {
  id            Int      @id @default(autoincrement())
  name          String
  activities    Activity[]
}

model Record {
  id            Int         @id @default(autoincrement())
  startedAt     DateTime    @default(now())
  endedAt       DateTime?
  deleted       Boolean     @default(false)
  activity      Activity    @relation(fields: [activityId], references: [id])
  activityId    Int
}
